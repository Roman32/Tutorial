---
title: HTML/CSS Tutorial
---
<div class="welcome">
	<h1>HTML/CSS Tutorial for CSE3901</h1>
	 <img  class="rubyLogo" src ="images/html-css.jpg" alt="HTML-CSS">
</div>
<br />
<p class="rubyTitle">Welcome to the HTML/CSS Tutorial for CSE3901!</p>
<p class="sectionTitle" id="HTMLCSSIntro">Introduction</p>
<p class="writing">
	The purpose of this tutorial is to introduce you to HTML and CSS. We'll start with HTML. HTML is an acronym which stands for '<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage'. What does this mean? Essentially, HTML is a language that web browsers read. HTML tells web browsers how to organize content. That's as simple as it gets! HTML is made up of <strong>&lt;tags&gt;</strong>. We'll talk more about those later.
</p>
<p class="writing">
	We'll touch more on CSS after HTML, but a brief introduction is in order. As HTML grew more advanced, browsers were capable of doing more and more fancy tricks to make content look incredibly nice and, well, stylish. Eventually, it became cumbersome to both organize and style content in the same file. CSS was created to fix this problem. CSS is an acronym that stands for '<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets'. We'll worry about what that specifically means later. For now, just remember that HTML is used to oragnize content, and CSS is used to style content.
</p>
<p class="sectionTitle" id="tags">Tags!</p>
<p class="writing">
	HTML is based on the usage of <strong>tags</strong>. What are tags? Tags are keywords that're written inside of angle brackets (&lt; and &gt;). Nearly all tags consist of both an opening part (<strong>&lt;tagname&gt;</strong>) and a closing part (<strong>&lt;/tagname&gt;</strong>). Within these two parts, you can type in content in the format of plaintext. You can also nest tags within one another. The basic format of your document should look something like this:
	<pre><code class="html">
		&lt;tagname&gt;content&lt;/tagname&gt;
	</code></pre>
	Note that, when you render an HTML page in your browser, the tags do not show up. Instead, the content shows up. This is because tags are simply used to organize your content. The browser does the heavy lifting of making things look the way they should, and returns to you a pretty view of the content organized as it should be!
	<br> <br>
	There are tons of HTML tags. Below you can find a list of some common tags and what their basic functions are.
	<ul>
		<li><strong>&lt;p&gt;</strong> tag holds your text in a paragraph structure</li>
		<li><strong>&lt;h1&gt;</strong> creates a heading. This text will be bigger than your average paragraph's text.</li>
		<li><strong>&lt;a&gt;</strong> tag, or the "anchor" tag, can be used to link to a webpage.</li>
		<li><strong>&lt;table&gt;</strong> tag creates the structure for a table</li>
		<li><strong>&lt;tr&gt;</strong> tag holds the content of a row of a table and should be written within the <strong>table</strong> tags.</li>
		<li><strong>&lt;td&gt;</strong> tags hold specific values for specific table elements. These tags should be within <strong>&lt;tr&gt;</strong> tags.</li>
		<li><strong>&lt;strong&gt;</strong> tag makes the text contained in the tag bold.</li>
	</ul>
	If you're interested in seeing more about specific tags, or want a larger list of tags, checkout <a href="http://www.w3schools.com/tags/">this link</a>.
	<br> <br>
	I stated that <em>nearly all</em> tags consist of an opening and closing part. Some notable tags that don't consist of both of these parts are listed below:
	<ul>
		<li>The <strong>&lt;br&gt;</strong> tag creates a line break in your text.</li>
		<li>The <strong>&lt;hr&gt;</strong> tag creates a horizontal line on your page.</li>
		<li>The <strong>&lt;img&gt;</strong> can show an image on your page.</li>
	</ul>
	There are many more tags that don't require a closing tag, but the ones listed above are the most notable.
	<br><br>
	A quick note to aide readability, throughout this tutorial I will be referring to tags specifically by making them <strong>bold</strong>.
</p>
<p class="sectionTitle" id="essentialTags">Let's get some essential tags out of the way</p>
<p class="writing">
	There are certain tags that nearly every HTML document will have. These tags are exemplified below in a sample HTML document:
	<pre><code class="html">
		&lt;!DOCTYPE html&gt;
		&lt;html&gt;
			&lt;head&gt;
				&lt;title&gt;[Page Title Here]&lt;/title&gt;
			&lt;/head&gt;
			&lt;body&gt;
				[content here]
			&lt;/body&gt;
		&lt;/html&gt;
	</code></pre>
	Let's go over what each of these tags does.<br />
	<ul>
		<li>The <strong>DOCTYPE</strong> tag is simply an identifier. It confirms that the document is indeed an HTML document.</li>
		<li>The <strong>html</strong> tag is used as the outer-most tag that holds HTML content. All of the content in the HTML page is within the <strong>html</strong> tags, except for the <strong>DOCTYPE</strong> tag.</li>
		<li>The <strong>head</strong> tag is a place for authors to include information about their document.</li>
		<li>The <strong>title</strong> tag within the head tag is used to declare a title for the page. The title is the text you see on your tab when you have a webpage open.</li>
		<li>The <strong>body</strong> tag is where you include most of your content. This is where the "body" of your webpage is. Essentially, everything you see in your browser window is due to content within the <strong>body</strong> tag.</li>
	</ul>
</p>
<p class="sectionTitle" id="yourFirstPage">Making your first page</p>
<p class="writing">
	Below, you can see the code for a very simple HTML page that uses the tags we've discussed so far:
	<pre><code class="html">
	&lt;!DOCTYPE html&gt;
	&lt;html&gt;
		&lt;head&gt;
			&lt;title&gt;Hello world!&lt;/title&gt;
		&lt;/head&gt;
		&lt;body&gt;
			&lt;h1&gt;This is a header!&lt;/h1&gt;
			&lt;p&gt;
				Hi there! This is a paragraph. I can add a &lt;strong&gt;br&lt;/strong&gt; tag to add a line break in my paragraph. Watch!
				&lt;br&gt;
				There it was! Also, I can use the &lt;strong&gt;strong&lt;/strong&gt; tag to make certain words bold!
				The horizontal line below is there thanks to a &lt;strong&gt;hr&lt;/strong&gt; tag.
			&lt;/p&gt;
			&lt;hr&gt;
			&lt;p&gt;
				We're now in a new paragraph! &lt;a href="http://www.google.com/"&gt;Here&lt;/a&gt; is a link to Google.com, created from an &lt;strong&gt;anchor&lt;/strong&gt; tag.
				Below, you can find an image that was added using the &lt;strong&gt;img&lt;/strong&gt; tag. 
				Also, there is a table that was constructed using the &lt;strong&gt;table&lt;/strong&gt;, &lt;strong&gt;tr&lt;/strong&gt;, and &lt;strong&gt;td&lt;/strong&gt; tags.
			&lt;/p&gt;
			&lt;img src="http://i.imgur.com/fUkvDkw.png" alt="A bunny with a pancake on its head!"&gt;
			&lt;table border="1px"&gt;
				&lt;tr&gt;
					&lt;td&gt;This is the first element in the table!&lt;/td&gt;
					&lt;td&gt;I'm still in the first row, but now in the second column!&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;Now we're in the second row!&lt;/td&gt;
					&lt;td&gt;Still in the second row!&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/body&gt;
	&lt;/html&gt;
	</code></pre>
	To see what this page looks like, you can copy and paste the code into your own html document! Simply open up a new file in notepad and paste the code in. Name the file whatever you want, but make sure you change the file's extension to ".html"! After that, open that file in your favorite web browser.
	<br><br>
	Alternatively, to see what kind of page this code will create, click <%= link_to 'this','sampleHTMLPage.html'%> link.
</p>
<p class="sectionTitle" id="additoinalHTMLNotes">Some additional notes on HTML</p>
<p class="writing">
	When writing HTML code, indentations and newlines are exclusively used to make the <em>code</em> easier to read, but likely won't affect the <em>content</em>. For example, all of the tabs in the HTML document above could be removed and the resulting document would look exactly the same. In fact, the entire document could technically be written on one line and still look the same when rendered in a browser! The lesson to take away here is that HTML ignores whitespace. If you want to add a line break to some text you're writing, use a <strong>&lt;br&gt;</strong> tag.
	<br><br>
	Some HTML tags involve more than just their tagname and content. Many tags have optional extra parameters called "attributes". An example of this is in the <strong>anchor</strong> tag in the sample page. The <strong>a</strong> tag uses the "href" attribute to point to whatever webpage we want it to link to. In our case, we had "href='http://www.google.com'" to make it link to Google.com. Another example of this is the <strong>&lt;img&gt;</strong> tag. We use the "src" attribute to refer the image to a specific picture hosted on the web. There are many attributes for many tags! Note that attributes always go in the opening tag, but never in the closing tag. 
</p>
<p class="sectionTitle" id="backToCSS">Back to CSS</p>
<p class="writing">
	By now you should have a solid understanding of HTML and how it helps you organize your content. But how is it that people can make content looking neat and fancy? CSS to the rescue!
</p>
<p class="sectionTitle" id="inlineStyling">Inline Styling</p>
<p class="writing">
	In the sample HTML document above, we have little to no custom styling. All the colors, fonts, and text sizes are the default ones. We can spice things up by adding the "style" attribute to different tags. For example, let's say we want to make our first paragraph red. There's a very easy way to do this! See the code below:
	<pre><code class="html">
		&lt;p style="color:red;"&gt;words&lt;/p&gt;
	</code></pre>
	This code looks very similar to the <strong>p</strong> tag we were using before, only this one includes a "style" attribute. Inside of this attribute, we can assign a number of different traits to the tag. Because tags can be nested, any styles that are defined in an outer tag spills over to content contained in inner tags too. Thus, the "cascading" in CSS.
	<br><br>
	Defining styles within the style attribute of a specific element like this is known as inline styling. There are other ways of styling that we'll soon learn about, but it should be noted that inline styling is the highest priority of style. Among the different ways of defining style, many times there can be conflicts that're resolved using a predefined heirarchy of which styles are most important. Inline styles are very high priority. Keep this in mind as we learn about the other ways of styling a document.
</p>
<p class="sectionTitle" id="internalStyleSheet">Internal Style Sheet</p>
<p class="writing">
	We already learned about where the "cascading" in CSS comes from, and the "style" is fairly obviously from the function of CSS (adding style), but what exactly does "sheets" mean? Right now, we're going to learn about something called an "internal style sheet". Take a code snippet below taken from a sample HTML document:
	<pre><code class="html">
		&lt;head&gt;
			&lt;style&gt;
				body {
					background-color:gray;
				}
				p {
					color:red;
				}
			&lt;/style&gt;
		&lt;/head&gt;
	</code></pre>
	This code applies the listed styles to each tag as if it was listed as an attribute. The beauty of this is that the style is applied to all of the respective tags in the document! For example, if you have multiple <strong>p</strong> tags in a document, you could use the method above to give them all the same background color. Note that if you have conflicting styles, the style with the higher priority will win. You can read more about priority further on in this tutorial. 
	<br><br>
	Another thing to note is that, even though the "color" style is going to be applied to the <strong>p</strong> tag only, if there was a nested tag with other content inside of the <strong>p</strong> tag then that content would also receive that style.
</p>
<p class="sectionTitle" id="CSSExample">Example of Internal Style Sheet</p>
<p class="writing">
	Let's use a simplified version of our sample HTML page from before and try to style it how we want using an inline style sheet. Let's try to make the text in the document red, and the background of the page gray. The code we're using looks like this:
	<pre><code class="html">
		&lt;!DOCTYPE html&gt;
		&lt;html&gt;
			&lt;head&gt;
				&lt;title&gt;Let's get stylin'!&lt;/title&gt;
				&lt;style&gt;
					body{
						background-color:gray;
					}
					p{
						color:red;
					}
				&lt;/style&gt;
			&lt;/head&gt;
			&lt;body&gt;
				&lt;h1&gt;This text won't change color :(&lt;/h1&gt;	
				&lt;p&gt;
					THIS text, however, will be incredibly red!
				&lt;/p&gt;
				&lt;p style="color:black;"&gt;This text will stay black though :(&lt;/p&gt;
			&lt;/body&gt;
		&lt;/html&gt;
	</code></pre>
	This code will end up looking like <%= link_to 'this','/sampleCSSPage.html'%>.
	<br><br>
	There are a couple things to note here.
	<ul>
		<li>The content inside of the h1 element stayed as black text! This was because no style was defined for the color of h1 elements and there was no style that cascaded down for it! If we had the "color:red;" style attached to the <strong>body</strong> or <strong>h1</strong> tags instead, then the text would have changed colors. Also, notice that, despite the inline styling defining paragraphs to have red color, the second paragraph remained black. This was because we used inline styling to trump the style sheet. 
	</ul>
</p>
<p class="sectionTitle" id="CSSAttributes">CSS Attributes</p>
<p class="writing">
	You can probably guess that CSS is more than just changing the colors of text and backgrounds. There are many <em>many</em> CSS properties that you can define for different elements. You can do things like make certain elements align to one side of the page, or make text wrap a certain way. You can use tables in creative ways to make your webpage look like it's flowing through many different columns. You can define specific fonts for specific elements. The list is literally endless. To see a large list of CSS properties, check out <%= link_to 'this','http://www.blooberry.com/indexdot/css/propindex/all.htm'%> link.
</p>
<p class="sectionTitle" id="IDsAndClasses">IDs and Classes</p>
<p class="writing">
	What happens if you only want style applied to a specific grouping of <strong>p</strong> tags? HTML tags can be assigned attributes called IDs and classes that help with this. 
	<br><br>
	To assign an element an id or class name, you simply add it in just like any other attribute. For example, you could have HTML that looks like this:
	<pre><code class="html">
		&lt;p id="first-paragraph"&gt;some text&lt;/p&gt;
		&lt;p class="regular-paragraph"&gt;some more text&lt;/p&gt;
	</code></pre>
	You could style the two paragraphs separately like so:
	<pre><code class="css">
		#first-paragraph{
			color:blue;
		}
		.regular-paragraph{
			color:red;
		}
	</code></pre>
	This CSS will style the first paragraph with blue text, and the second paragraph with red text. The syntax for selecting specific elements in CSS is, you define an ID by using a #, or a class by using a ".". You can also be more specific with your selectors. For example, if you said p.regular-paragraph as your selector, you'd only be styling paragraphs with that class, rather then all tags with that class. You can also use multiple selectors for the same styling. For example, you could do the following:
	<pre><code class="css">
		h1, .regular-paragraph{
			color:red;
		}
	</code></pre>
	This would style all h1 tags, as well as all tags of the class "regular-paragraph". You can read more about different CSS selectors <%= link_to 'here','http://www.w3schools.com/css/css_selectors.asp'%>.
</p>
<p class="sectionTitle" id="ExternalStyleSheets">External Style Sheets</p>
<p class="writing">
	Remember how we were saying that the point of CSS is to separate the style of your content from how it's organized? Well inline style sheets don't really help with this, since the style is at the top of the document anyway. The solution to this problem is external style sheets. You can write a file using entirely syntax that would normally go between the <strong>style</strong> tags in a file with the .css extension. After doing this, you simply add the line '&lt;link rel="stylesheet" type="text/css" href="filename.css"&gt;' inside of your head tag to include that file's style. An advantage to this is that you can keep the styles of multiple pages consistent by having them all include the same .css file. 
</p>
<p class="sectionTitle" id="HTMLCSSConclusion">Go forth, and conquor!</p>
<p class="writing">
	You now know the basics, but there is still much to learn. There are many good resources, such as <%=link_to 'W3Schools','http://www.w3schools.com/'%> that contain helpful information. Good luck!
</p>
